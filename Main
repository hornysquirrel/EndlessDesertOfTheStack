#include<iostream>
#include<string>

struct TheSmallestGrainOfTheStack {
    long long value;
    TheSmallestGrainOfTheStack *next;
};

class EndlessDesertOfTheStack {
public:
    TheSmallestGrainOfTheStack empty{};
    TheSmallestGrainOfTheStack *PointerHead = &empty;
    int len = 0;
    void push(long long n) {
        auto *oleg = new TheSmallestGrainOfTheStack();
        (*oleg).value = n;
        (*oleg).next = PointerHead;
        len++;
        PointerHead = oleg;
        std::cout << "ok" << std::endl;
    }
    void pop(){
        if(len == 0){
            std::cout << "error" << std::endl;
        }
        else {
            TheSmallestGrainOfTheStack *PointerDeath = PointerHead;
            std::cout << (*PointerHead).value << std::endl;
            PointerHead = (*PointerHead).next;
            len--;
            delete PointerDeath;
        }
    };
    void back() const{
        if(len == 0){
            std::cout << "error" << std::endl;
        }
        else{
            std::cout << (*PointerHead).value << std::endl;
        }
    };
    void size() const{
        std::cout << len << std::endl;
    };
    void clear(){
        TheSmallestGrainOfTheStack *PointerLethal = PointerHead;
        TheSmallestGrainOfTheStack *PointerDeath;
        PointerDeath = PointerLethal;
        PointerHead = &empty;
        for(int i = 0; i < len; i++) {
            PointerLethal = (*PointerDeath).next;
            delete PointerDeath;
            PointerDeath = PointerLethal;
        }
        len = 0;
        std::cout << "ok" << std::endl;
    };
};

int main() {
    std::string move;
    std::string exit = "exit";
    std::string clear = "clear";
    std::string size = "size";
    std::string back = "back";
    std::string pop = "pop";
    std::string push = "push";
    EndlessDesertOfTheStack Oleg;
    for(int i = 0; true; i++){
        std::cin >> move;
        if(move == exit){
            std::cout << "bye" << std::endl;
            return 0;
        }
        if(move == clear){
            Oleg.clear();
        }
        if(move == size){
            Oleg.size();
        }
        if(move == back){
            Oleg.back();
        }
        if(move == pop){
            Oleg.pop();
        }
        if(move == push){
            long long val;
            std::cin >> val;
            Oleg.push(val);
        }
    }
}
