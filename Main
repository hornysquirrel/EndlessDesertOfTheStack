#include<iostream>
#include<string>

struct Element {
    long long value;
    Element *next;
};

class Stack {
public:
    Element empty{};
    Element *ptrHead = &empty;
    int len = 0;
    void push(long long n) {
        auto *oleg = new Element();
        (*oleg).value = n;
        (*oleg).next = ptrHead;
        len++;
        ptrHead = oleg;
        std::cout << "ok" << std::endl;
    }
    void pop(){
        if(len == 0){
            std::cout << "error" << std::endl;
        }
        else {
            Element *ptrDeath = ptrHead;
            std::cout << (*ptrHead).value << std::endl;
            ptrHead = (*ptrHead).next;
            len--;
            delete ptrDeath;
        }
    };
    void back() const{
        if(len == 0){
            std::cout << "error" << std::endl;
        }
        else{
            std::cout << (*ptrHead).value << std::endl;
        }
    };
    void size() const{
        std::cout << len << std::endl;
    };
    void clear(){
        Element *ptrLethal = ptrHead;
        Element *ptrDeath;
        ptrDeath = ptrLethal;
        ptrHead = &empty;
        for(int i = 0; i < len; i++) {
            ptrLethal = (*ptrDeath).next;
            delete ptrDeath;
            ptrDeath = ptrLethal;
        }
        len = 0;
        std::cout << "ok" << std::endl;
    };
};

int main() {
    std::string move;
    std::string exit = "exit";
    std::string clear = "clear";
    std::string size = "size";
    std::string back = "back";
    std::string pop = "pop";
    std::string push = "push";
    Stack Stack;
    for(int i = 0; true; i++){
        std::cin >> move;
        if(move == exit){
            std::cout << "bye" << std::endl;
            return 0;
        }
        if(move == clear){
            Stack.clear();
        }
        if(move == size){
            Stack.size();
        }
        if(move == back){
            Stack.back();
        }
        if(move == pop){
            Stack.pop();
        }
        if(move == push){
            long long val;
            std::cin >> val;
            Stack.push(val);
        }
    }
}
